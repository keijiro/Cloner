#pragma kernel SwarmInit
#pragma kernel SwarmUpdate

#include "UnityCG.cginc"
#include "SimplexNoise3D.cginc"

RWStructuredBuffer<float4> PositionBuffer;
Texture3D<float4> _Boundaries;

CBUFFER_START(Params)
    uint ArraySize;
    uint InstanceCount;
    float Offset;
CBUFFER_END

float UVRandom(float u, float v)
{
    float f = dot(float2(12.9898, 78.233), float2(u, v));
    return frac(43758.5453 * sin(f));
}

[numthreads(64,1,1)]
void SwarmInit(uint id : SV_DispatchThreadID)
{
    float4 p = float4(
        UVRandom(id, 0.0),
        UVRandom(id, 0.1),
        UVRandom(id, 0.2),
        UVRandom(id, 0.3)
    ) * 1.4 - 0.7;

    //p *= 0.5;
    p *= float4(0.2, 0.5, 0.2, 1);

    for (uint i = 0; i < ArraySize; i++)
        PositionBuffer[id + i * InstanceCount] = p;
}

[numthreads(64,1,1)]
void SwarmUpdate(uint id : SV_DispatchThreadID)
{
    uint offs = id;
    for (uint i = 0; i < ArraySize - 1; i++)
    {
        PositionBuffer[offs] = PositionBuffer[offs + InstanceCount];
        offs += InstanceCount;
    }

    float3 p = PositionBuffer[offs].xyz;
    float3 p2 = p * 0.25 + 0.5;

    float4 bd = _Boundaries[saturate(p2) * 50] * 5.5;

    float4 sn1 = snoise(10.33 + p2 * 10 + Offset * 0.1);// + id * 0.131);
    float4 sn2 = snoise(32.38 - p2 * 10 + Offset * 0.1);// + id * 0.131);

    sn1.xyz = -sn1.xyz * bd.w + bd.xyz * sn1.w;
    float3 v = cross(sn1.xyz, sn2.xyz);
    p += v * 0.008;

    PositionBuffer[offs].xyz = p;
}
