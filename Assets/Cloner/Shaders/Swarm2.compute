#pragma kernel SwarmUpdate

#include "UnityCG.cginc"
#include "SimplexNoiseGrad3D.cginc"

RWStructuredBuffer<float4> PositionBuffer;

CBUFFER_START(Params)
    uint ArraySize;
    uint InstanceCount;
    float Time;
CBUFFER_END

float UVRandom(float u, float v)
{
    float f = dot(float2(12.9898, 78.233), float2(u, v));
    return frac(43758.5453 * sin(f));
}

float3 RandomPoint(float u)
{
    return float3(UVRandom(u, 0), UVRandom(u, 0.1), UVRandom(u, 0.2));
}

[numthreads(64,1,1)]
void SwarmUpdate(uint id : SV_DispatchThreadID)
{
    float3 p = (RandomPoint(id) * 2 - 1) * 1.0;

    uint offs = id;
    for (uint i = 0; i < ArraySize; i++)
    {
        float3 sn1 = snoise_grad(10.33 + p / 1.5 + Time * 0.038);
        float3 sn2 = snoise_grad(32.38 - p / 21.5 - Time * 0.028);
        p += cross(sn1, sn2) * 0.0023;
        PositionBuffer[offs].xyz = p;
        offs += InstanceCount;
    }
}
